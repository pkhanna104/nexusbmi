function spec_dist_early_late(ax, ax2, blocks, date, tslice, tslice_opt, trim_n_targs, low_high, beta_range)
fn = randi(1000)+10;

% Inputs: See 'concat_dat_gen' for description / format of inputs
[FT, RAW_stn, RAW_m1, TARG, CURS, REW, idx, PXX_CHAN] = concat_dat_gen(blocks, date, tslice, tslice_opt, trim_n_targs);

%Extract correct feature:
if size(FT, 2) >= 3 && sum(FT(:,3))>0
    FT = FT(:,3);
else
    disp('using power channel as feature')
    FT = PXX_CHAN(1,:);
end

%Testing feature fr normality:
x = FT;
x(x==0)=nan;
mn = nanmean(x);
st = nanstd(x);
H = kstest((x-mn)/st);
if H
    use_param = 0;
    disp('Use nonparametric')
else
    use_param = 1;
    disp('Use parametric')
end

% Color Map:
spec_vect_main = {};
targ_locs = [-6 -2 2 6];
cmap = {[32 178 170]/255, [70 130 180]/255,[255 215 0]/255, [255 69 0]/255};

x = linspace(0,1,32);
cmap_imsc = flipud([ones(32, 1) x' x'; flipud(x') flipud(x') ones(32,1)]);


%Figure 1: Trial avg. feature timecourse
ft_stats = [];
grp_stats = [];
for i = 1:length(targ_locs)
    rw_ix = find(TARG(REW)== targ_locs(i));
    if ~isempty(rw_ix)
        ft_mat = zeros(length(rw_ix), 6);
        
        % For each reward, add features
        for r = 1:length(rw_ix)
            rw = REW(rw_ix(r));
            if rw>6
                ft_mat(r,:) = FT(rw-5:rw);
            else
                ft_mat(r,6-rw+1:end) = FT(1:rw);
            end
        end
        %Make anything that's zero a nan
        ft_mat(ft_mat==0) = nan;
        sem=nanstd(ft_mat,0, 1)/sqrt(size(ft_mat,1));% standa
        mn = nanmean(ft_mat, 1);
        
        %Plot Lead up to Reward
        t = [.4*-5:.4:0];
        errorbar(ax, t, mn, sem,'color',cmap{i},'LineWidth',3,'MarkerSize',30)
        
        %Features Statistics
        ft_stats = [ft_stats; ft_mat];
        
        %Group variable
        grp_stats = [grp_stats zeros(1,size(ft_mat,1))+i];
    end
end

%STATS on Figure 1:
for tt =1:6 %For each time point:
    
    %First test for normality:
    if use_param
        [p, anovatab, stats] = anova1(ft_stats(:,tt), grp_stats, 'off');
    else
        p = kruskalwallis(ft_stats(:,tt), grp_stats, 'off');
    end
    
    if p <= .05
        if p <= .05 & p > .01
            plot(ax, t(tt), 20, 'k*')
        elseif p<= .01 & p > .001
            plot(ax, [t(tt) t(tt)+.05], [20 20], 'k*')
        elseif p < .001
            plot(ax, [t(tt) t(tt)+.05 t(tt)+.1], [20 20 20], 'k*')
        end
        disp(strcat('Figure 1: p Value: ', num2str(tt), '__', num2str(p)))
    end
end
%END STATS

legend(ax, 'Targ: 1','Targ: 2','Targ: 3','Targ: 4','Location','northwest')
xlabel(ax,'Time Prior to Reward (sec)','FontSize',20)
ylabel(ax,strcat('Beta (',num2str(beta_range(1)),'-',num2str(beta_range(2))...
    ,' Hz) Power'),'FontSize',20)
LEGH = legend(ax);
set(LEGH,'Location','northwest')


%Spec triggered plots:
if sum(sum(RAW_stn)) == 0
    RAW = RAW_m1;
else
    RAW = RAW_stn;
end

params = struct();
params.Fs = 422;

[S, f] = pwelch(rand(169,1), 128, 0, 128, params.Fs);

dat = RAW(:,1:168);
baseline = zeros(size(dat,1), length(f));
for i = 1:size(dat,1)
    if sum(dat(i,1:168))>0
        [S, f] = pwelch(dat(i,1:168)', 128, 0, 128, params.Fs);
        baseline(i, :) = S;
    else
        baseline(i,:) = nan;
    end
end

baseline_mu =  nanmean(baseline, 1);
baseline_std = nanstd(baseline, 0, 1);

t = [.4*-5:.4:0];
mximm = [];
mnimm = [];
fr_z ={};

for i = 1:length(targ_locs)
    
    rw_ix = find(TARG(REW)== targ_locs(i));
    if ~isempty(rw_ix)
        raw_mat = zeros(length(rw_ix), 6, 168);
        spec_mat = zeros(length(rw_ix), 6, length(f));
        spec_vect = zeros(length(rw_ix), length(f));
        
        for r = 1:length(rw_ix)
            rw = REW(rw_ix(r));
            if rw >5
                dat = RAW(rw-5:rw,1:168);
            else
                dat = zeros(6,168);
                dat(6-rw+1:end,:) = RAW(1:rw, 1:168);
            end
            
            raw_mat(r,:,:) = dat;
            %[Sind, f_i] = mtspectrumc(dat', params);
            for ixx = 1:size(spec_mat, 2)
                if sum(dat(ixx,:)) == 0
                    spec_mat(r,ixx,:) = nan;
                else
                    [Sind, f_i] =  pwelch(dat(ixx,:), 128, 0, 128, params.Fs);
                    spec_mat(r,ixx,:) = Sind;
                end
            end
            spec_vect(r,:) = squeeze(mean(spec_mat(r, end-1:end, :),2));
        end
        
        spec_vect_main{i}=spec_vect;
        z = mean(spec_vect,1);
        b_mean = nanmean(baseline, 1);
        b_std = nanstd(baseline, 0 , 1);
        
        sem = nanstd(spec_vect-repmat(b_mean, size(spec_vect, 1), 1))/sqrt(size(spec_vect, 1));
        zsc = (z - b_mean)./(b_std);
        ix = 1:length(z);
        
        if i==low_high(1) || i==low_high(2)
            plot(f(ix), zsc(ix),'color',cmap{i},'LineWidth',3,'MarkerSize',30)
            %errorbar(f(ix), zsc(ix), sem(ix),'color',cmap{i},'LineWidth',3,'MarkerSize',30)
        end
        
        if i==4
            ks = [];
            for jj=1:length(f)
                ks = [ks kstest2(spec_vect_main{low_high(1)}(:,jj), spec_vect_main{low_high(2)}(:,jj))];
            end
            sig = find(ks==1);
            if length(sig) > 0
                plot(f(sig), zeros(length(sig),1), 'k*')
            else
                disp('no sig')
            end
        end
        
    end
end
end

